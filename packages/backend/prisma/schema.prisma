generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Broker {
  id              String           @id @default(cuid())
  code            String           @unique
  name            String
  description     String?
  apiBaseUrl      String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  holdingAccounts HoldingAccount[]
}

enum HoldingAccountProviderType {
  BROKERAGE
  EXCHANGE
  WALLET
  OTHER
}

enum HoldingAccountSyncMode {
  MANUAL
  API
}

model HoldingAccount {
  id           String                     @id @default(cuid())
  name         String
  description  String?
  isActive     Boolean                    @default(true)
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  userId       String
  user         User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerType HoldingAccountProviderType
  syncMode     HoldingAccountSyncMode
  brokerId     String?
  broker       Broker?                    @relation(fields: [brokerId], references: [id], onDelete: SetNull)
  apiKeyCipher String?
  apiKeyIv     String?
  apiKeyTag    String?
  apiSecretCipher String?
  apiSecretIv     String?
  apiSecretTag    String?
  holdings     Holding[]

  @@index([userId])
  @@index([brokerId])
}

model MarketSecurity {
  id           String   @id @default(cuid())
  market       String
  symbol       String
  name         String
  currency     String
  currentPrice Float
  lastUpdated  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([market, symbol], name: "market_symbol")
}

model Market {
  id                     String   @id @default(cuid())
  code                   String   @unique
  displayName            String
  yahooSuffix            String?
  yahooMarketIdentifiers String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

enum HoldingSource {
  BROKERAGE
  MANUAL
}

model Holding {
  id           String           @id @default(cuid())
  userId       String
  source       HoldingSource
  accountId    String
  market       String?
  symbol       String
  name         String
  quantity     Float
  currentPrice Float
  marketValue  Float
  currency     String
  lastUpdated  DateTime
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  account      HoldingAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@unique([accountId, symbol], name: "accountId_symbol_unique")
}

model Tag {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  color             String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  userId            String
  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdingTags       HoldingTag[]
  groupLinks        RebalancingGroupTag[]
  targetAllocations TargetAllocation[]

  @@unique([userId, name])
}

model HoldingTag {
  id            String   @id @default(cuid())
  holdingSymbol String
  tagId         String
  createdAt     DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag           Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([userId, holdingSymbol])
  @@unique([userId, holdingSymbol, tagId], name: "user_holdingSymbol_tagId")
}

model RebalancingGroup {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  userId            String
  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags              RebalancingGroupTag[]
  targetAllocations TargetAllocation[]

  @@unique([userId, name])
}

model RebalancingGroupTag {
  groupId   String
  tagId     String
  createdAt DateTime          @default(now())
  group     RebalancingGroup  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tag       Tag               @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([groupId, tagId])
}

model TargetAllocation {
  id               String            @id @default(cuid())
  groupId          String
  tagId            String
  targetPercentage Float
  group            RebalancingGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tag              Tag              @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([groupId, tagId])
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  passwordHash       String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  holdingAccounts    HoldingAccount[]
  tags               Tag[]
  holdingTags        HoldingTag[]
  holdings           Holding[]
  rebalancingGroups  RebalancingGroup[]
}
